{"ast":null,"code":"var _jsxFileName = \"/Users/fereshtaahmadi/NTNU/Vaaren 2023/bachelor/frontend/src/components/SessionCard.js\";\nimport React from \"react\";\nimport Card from \"./openBridge/Card\";\nimport \"../card.css\";\nimport NormalButton from \"./openBridge/NormalButton\";\nimport \"../openbridge.css\";\n\n/**\n * Makes a session card.\n * @param {session} session the session to make a card of.\n * @returns the session card.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SessionCard(_ref) {\n  let {\n    session\n  } = _ref;\n  console.log(session);\n  function makeContent() {\n    let time = 0;\n    let referencePositons = session.referencePositions;\n    for (let i = 0; i < referencePositons.length; i++) {\n      let position = referencePositons[i];\n      time += parseFloat(position.positionDuration);\n    }\n    time = 3701;\n    let timeString = \"\";\n    let rawTime = time / 3600;\n    let hour = Math.floor(rawTime);\n    if (hour > 0) {\n      timeString += hour + \" hour(s)\";\n    }\n    let minutes = Math.floor(time / 60 - hour * 60);\n    let seconds = Math.floor(time - hour * 3600 - minutes * 60);\n    if (seconds > 0 && minutes > 0) {\n      timeString += \", \" + minutes + \" minute(s) and \" + seconds + \" second(s)\";\n    } else if (minutes > 0) {\n      timeString += \" and \" + minutes + \"minute(s)\";\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-name-of-session\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"card-body-sub-text\",\n          children: timeString\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"card-body-sub-text\",\n          children: session.userID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NormalButton, {\n        text: \"See session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n  let dateArray = session.currentDate.split(\"T\");\n  let nameOfCard = dateArray[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Tugboat \" + nameOfCard,\n      content: makeContent()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_c = SessionCard;\nvar _c;\n$RefreshReg$(_c, \"SessionCard\");","map":{"version":3,"names":["React","Card","NormalButton","jsxDEV","_jsxDEV","SessionCard","_ref","session","console","log","makeContent","time","referencePositons","referencePositions","i","length","position","parseFloat","positionDuration","timeString","rawTime","hour","Math","floor","minutes","seconds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","userID","text","dateArray","currentDate","split","nameOfCard","title","content","_c","$RefreshReg$"],"sources":["/Users/fereshtaahmadi/NTNU/Vaaren 2023/bachelor/frontend/src/components/SessionCard.js"],"sourcesContent":["import React from \"react\";\nimport Card from \"./openBridge/Card\";\nimport \"../card.css\";\nimport NormalButton from \"./openBridge/NormalButton\";\nimport \"../openbridge.css\";\n\n/**\n * Makes a session card.\n * @param {session} session the session to make a card of.\n * @returns the session card.\n */\nexport default function SessionCard({ session }) {\n  console.log(session);\n\n  function makeContent() {\n    let time = 0;\n    let referencePositons = session.referencePositions;\n    for (let i = 0; i < referencePositons.length; i++) {\n      let position = referencePositons[i];\n      time += parseFloat(position.positionDuration);\n    }\n\n    time = 3701;\n    let timeString = \"\";\n    let rawTime = time / 3600;\n    let hour = Math.floor(rawTime);\n    if (hour > 0) {\n      timeString += hour + \" hour(s)\";\n    }\n    let minutes = Math.floor(time / 60 - hour * 60);\n    let seconds = Math.floor(time - hour * 3600 - minutes * 60);\n    if (seconds > 0 && minutes > 0) {\n      timeString += \", \" + minutes + \" minute(s) and \" + seconds + \" second(s)\";\n    } else if (minutes > 0) {\n      timeString += \" and \" + minutes + \"minute(s)\";\n    }\n\n    return (\n      <div className=\"card-content\">\n        <div className=\"time-name-of-session\">\n          <span className=\"card-body-sub-text\">{timeString}</span>\n          <span className=\"card-body-sub-text\">{session.userID}</span>\n        </div>\n        <NormalButton text=\"See session\" />\n      </div>\n    );\n  }\n\n  let dateArray = session.currentDate.split(\"T\");\n  let nameOfCard = dateArray[0];\n\n  return (\n    <div>\n      <Card title={\"Tugboat \" + nameOfCard} content={makeContent()} />\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}